@z --- w_type.web ---

FWEB version 1.53 (September 23, 1995)

Based on version 0.5 of S. Levy's CWEB [copyright (C) 1987 Princeton University]

@x-----------------------------------------------------------------------------


\Title{W\_TYPE.WEB} % Prototypes for FWEAVE.

@c 
@* PROTOTYPES for {\tt FWEAVE.WEB}.  The function prototypes are macroed
up so that if |PROTOTYPES==1| (see \.{proto.hweb}) one gets full function
prototyping; otherwise just old-style declarations.

@I formats.hweb

@I os.hweb

@ The make file produces \.{w\_type.h} from these prototypes.
@a

#include SFILE(s_type.h) // Prototypes for \.{style}.
#include SFILE(c_type.h) // Prototypes for \.{common.web}.
#include SFILE(p_type.h) // Prototypes for \.{prod.web}.
#include SFILE(d_type.h) // Prototypes for \.{reserved.web}.

SRTN app_hdr PROTO((CONST char *section_part));
SRTN app_overload PROTO((VOID));
SRTN app_lang PROTO((CONST outer_char *suffix));
SRTN app_misc PROTO((outer_char *s));
SRTN app_proc PROTO((eight_bits next_control));
SRTN app_temp PROTO((CONST outer_char letter[],CONST outer_char arg[]));
SRTN break_out PROTO((VOID));
eight_bits copy_TeX PROTO((VOID));
SRTN C_parse PROTO((PARSING_MODE mode0));
text_pointer C_translate PROTO((VOID));
SRTN C_xref PROTO((PART part0,PARSING_MODE mode0));
int copy_comment PROTO((int bal));
SRTN copy_limbo PROTO((VOID));
ASCII HUGE *esc_buf PROTO((ASCII HUGE *temp,CONST ASCII HUGE
		*temp_end,CONST ASCII HUGE *buf,boolean all_cases));
SRTN fin_C PROTO((VOID));
SRTN fin_line PROTO((VOID));
SRTN flush_buffer PROTO((ASCII HUGE *b,boolean per_cent));
SRTN footnote PROTO((sixteen_bits flag));
GOTO_CODE get_control_code PROTO((VOID));
SRTN get_iformats PROTO((VOID));
eight_bits get_next PROTO((VOID));
eight_bits get_output PROTO((VOID));
eight_bits get_string PROTO((ASCII c,ASCII boz));
eight_bits get_TeX PROTO((VOID));
SRTN init_op PROTO((eight_bits op_code,CONST outer_char op_name[],
		int lang,CONST outer_char op_macro[],boolean overload,
		eight_bits cat,CONST outer_char defn[]));
int main PROTO((int ac,outer_char **av));
SRTN make_output PROTO((VOID));
outer_char *mktmp PROTO((outer_char *file_name, outer_char *ext));
SRTN mod_check PROTO((name_pointer p));
SRTN mod_print PROTO((name_pointer p));
SRTN new_mod_xref PROTO((name_pointer p));
SRTN new_xref PROTO((PART part0,name_pointer p));
SRTN out_fname PROTO((CONST outer_char HUGE *s));
SRTN out_md_name PROTO((VOID));
SRTN out_mod PROTO((sixteen_bits n,boolean encap));
SRTN out_name PROTO((boolean is_id,name_pointer p));
SRTN out_skip PROTO((VOID));
SRTN out_str PROTO((CONST outer_char HUGE *s));
SRTN out_del_str PROTO((token_pointer s,token_pointer t));
SRTN outr_parse PROTO((VOID));
SRTN outr_xref PROTO((PART part0));
SRTN output_C PROTO((VOID));
SRTN phase1 PROTO((VOID));
SRTN phase2 PROTO((VOID));
SRTN phase3 PROTO((VOID));
SRTN pop_level PROTO((VOID));
SRTN pr_format PROTO((boolean xref_lhs, boolean xref_rhs));
SRTN pre_scrap PROTO((eight_bits last_control));
GOTO_CODE prs_TeX_code PROTO((VOID));
GOTO_CODE prs_regular_code PROTO((GOTO_CODE iswitch));
SRTN push_level PROTO((text_pointer p));
SRTN room_for PROTO((int ntokens,int ntexts,int nscraps));
SRTN see_wstatistics PROTO((VOID));
SRTN set_language PROTO((LANGUAGE language0));
eight_bits skip_TeX PROTO((VOID));
SRTN skip_file PROTO((VOID));
SRTN skip_limbo PROTO((VOID));
int TeX_char PROTO((VOID));
SRTN trns_code PROTO((VOID));
SRTN trns_defn PROTO((VOID));
SRTN trns_TeX PROTO((VOID));
SRTN unbucket PROTO((eight_bits d));
OPERATOR HUGE *valid_op PROTO((eight_bits op_code));

@ Index:
